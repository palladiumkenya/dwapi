// <auto-generated />
using System;
using Dwapi.ExtractsManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dwapi.ExtractsManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ExtractsContext))]
    [Migration("20221031125343_HtsRiskScoresInitial")]
    partial class HtsRiskScoresInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Cbs.MasterPatientIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birth_Certificate");

                    b.Property<string>("CCC_Number");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstName_Normalized");

                    b.Property<string>("Gender");

                    b.Property<double?>("JaroWinklerScore");

                    b.Property<string>("LastName");

                    b.Property<string>("LastName_Normalized");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleName_Normalized");

                    b.Property<string>("NHIF_Number");

                    b.Property<string>("National_ID");

                    b.Property<string>("PatientAlternatePhoneNumber");

                    b.Property<string>("PatientCounty");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientPhoneNumber");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientSubCounty");

                    b.Property<string>("PatientVillage");

                    b.Property<bool?>("Processed");

                    b.Property<string>("QueueId");

                    b.Property<string>("Serial");

                    b.Property<int>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartARTRegimenCode");

                    b.Property<string>("StartARTRegimenDesc");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TB_Number");

                    b.Property<string>("dmFirstName");

                    b.Property<string>("dmLastName");

                    b.Property<string>("dmMiddleName");

                    b.Property<string>("dmPKValue");

                    b.Property<string>("dmPKValueDoB");

                    b.Property<string>("sxFirstName");

                    b.Property<string>("sxLastName");

                    b.Property<string>("sxMiddleName");

                    b.Property<string>("sxPKValue");

                    b.Property<string>("sxPKValueDoB");

                    b.Property<string>("sxdmPKValue");

                    b.Property<string>("sxdmPKValueDoB");

                    b.HasKey("Id");

                    b.ToTable("MasterPatientIndices");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Crs.ClientRegistryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlienIdNo");

                    b.Property<string>("AlternativePhoneNumber");

                    b.Property<string>("BirthCertificateNumber");

                    b.Property<string>("CCCNumber");

                    b.Property<string>("County");

                    b.Property<string>("CurrentOnART");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime?>("DateOfHIVdiagnosis");

                    b.Property<DateTime?>("DateOfInitiation");

                    b.Property<DateTime?>("DateOfLastEncounter");

                    b.Property<DateTime?>("DateOfLastViralLoad");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DrivingLicenseNumber");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("HighestLevelOfEducation");

                    b.Property<string>("HudumaNumber");

                    b.Property<string>("Landmark");

                    b.Property<string>("LastName");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<string>("LastViralLoadResult");

                    b.Property<string>("Location");

                    b.Property<string>("MFLCode");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NameOfNextOfKin");

                    b.Property<string>("NationalId");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("NextOfKinRelationship");

                    b.Property<string>("NextOfKinTelNo");

                    b.Property<string>("Occupation");

                    b.Property<string>("Passport");

                    b.Property<string>("PatientClinicNumber");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Sex");

                    b.Property<int>("SiteCode");

                    b.Property<string>("SpousePhoneNumber");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SubCounty");

                    b.Property<string>("TreatmentOutcome");

                    b.Property<string>("Village");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("ClientRegistryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.AllergiesChronicIllnessExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("AllergicReaction");

                    b.Property<string>("AllergyCausativeAgent");

                    b.Property<DateTime?>("AllergyOnsetDate");

                    b.Property<string>("AllergySeverity");

                    b.Property<string>("CNS");

                    b.Property<string>("CVS");

                    b.Property<string>("Chest");

                    b.Property<string>("ChronicIllness");

                    b.Property<DateTime?>("ChronicOnsetDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("ENT");

                    b.Property<string>("Emr");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Genitourinary");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("knownAllergies");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("AllergiesChronicIllnessExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.ContactListingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactAge");

                    b.Property<string>("ContactMaritalStatus");

                    b.Property<int?>("ContactPatientPK");

                    b.Property<string>("ContactSex");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IPVScreeningOutcome");

                    b.Property<string>("IpvScreening");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PnsApproach");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RelationshipWithPatient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("ContactListingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.CovidExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdmissionEndDate");

                    b.Property<DateTime?>("AdmissionStartDate");

                    b.Property<string>("AdmissionStatus");

                    b.Property<string>("AdmissionStatusSinceLastVisit");

                    b.Property<string>("AdmissionUnit");

                    b.Property<string>("AdmissionUnitSinceLastVisit");

                    b.Property<string>("BoosterDose");

                    b.Property<DateTime?>("BoosterDoseDate");

                    b.Property<string>("BoosterGiven");

                    b.Property<string>("COVID19PositiveSinceLasVisit");

                    b.Property<DateTime?>("COVID19TestDate");

                    b.Property<DateTime?>("COVID19TestDateSinceLastVisit");

                    b.Property<string>("COVID19TestResult");

                    b.Property<string>("CauseOfDeath");

                    b.Property<DateTime?>("Covid19AssessmentDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateGivenFirstDose");

                    b.Property<DateTime?>("DateGivenSecondDose");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EverCOVID19Positive");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstDoseVaccineAdministered");

                    b.Property<string>("MissedAppointmentDueToCOVID19");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PatientStatus");

                    b.Property<string>("PatientStatusSinceLastVisit");

                    b.Property<string>("PatientVentilated");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReceivedCOVID19Vaccine");

                    b.Property<string>("SecondDoseVaccineAdministered");

                    b.Property<string>("Sequence");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SupplementalOxygenReceived");

                    b.Property<string>("TracingFinalOutcome");

                    b.Property<string>("VaccinationStatus");

                    b.Property<string>("VaccineVerification");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("CovidExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DefaulterTracingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttemptNumber");

                    b.Property<DateTime?>("BookingDate");

                    b.Property<string>("CauseOfDeath");

                    b.Property<string>("Comments");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IsFinalTrace");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.Property<string>("TrueStatus");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("DefaulterTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DepressionScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("DepressionAssesmentScore");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PHQ9_1");

                    b.Property<string>("PHQ9_2");

                    b.Property<string>("PHQ9_3");

                    b.Property<string>("PHQ9_4");

                    b.Property<string>("PHQ9_5");

                    b.Property<string>("PHQ9_6");

                    b.Property<string>("PHQ9_7");

                    b.Property<string>("PHQ9_8");

                    b.Property<string>("PHQ9_9");

                    b.Property<string>("PHQ_9_rating");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("DepressionScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DrugAlcoholScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DrinkingAlcohol");

                    b.Property<string>("DrugUse");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Smoking");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("DrugAlcoholScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.EnhancedAdherenceCounsellingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateOfFirstSession");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EACAdherencePlan");

                    b.Property<string>("EACBehaviouralBarrier_1");

                    b.Property<string>("EACBehaviouralBarrier_2");

                    b.Property<string>("EACBehaviouralBarrier_3");

                    b.Property<string>("EACBehaviouralBarrier_4");

                    b.Property<string>("EACBehaviouralBarrier_5");

                    b.Property<string>("EACCognitiveBarrier");

                    b.Property<string>("EACEconBarrier_1");

                    b.Property<string>("EACEconBarrier_2");

                    b.Property<string>("EACEconBarrier_3");

                    b.Property<string>("EACEconBarrier_4");

                    b.Property<string>("EACEconBarrier_5");

                    b.Property<string>("EACEconBarrier_6");

                    b.Property<string>("EACEconBarrier_7");

                    b.Property<string>("EACEconBarrier_8");

                    b.Property<string>("EACEmotionalBarriers_1");

                    b.Property<string>("EACEmotionalBarriers_2");

                    b.Property<DateTime?>("EACFollowupDate");

                    b.Property<string>("EACHomevisit");

                    b.Property<string>("EACRecievedVL");

                    b.Property<string>("EACReferral");

                    b.Property<string>("EACReferralApp");

                    b.Property<string>("EACReferralExperience");

                    b.Property<string>("EACReviewImprovement");

                    b.Property<string>("EACReviewMissedDoses");

                    b.Property<string>("EACReviewStrategy");

                    b.Property<string>("EACVL");

                    b.Property<string>("EACVLConcerns");

                    b.Property<string>("EACVLThoughts");

                    b.Property<string>("EACWayForward");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("MMAS4_1");

                    b.Property<string>("MMAS4_2");

                    b.Property<string>("MMAS4_3");

                    b.Property<string>("MMAS4_4");

                    b.Property<string>("MMSA8_1");

                    b.Property<string>("MMSA8_2");

                    b.Property<string>("MMSA8_3");

                    b.Property<string>("MMSA8_4");

                    b.Property<string>("MMSAScore");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<int?>("PillCountAdherence");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int?>("SessionNumber");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("EnhancedAdherenceCounsellingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.GbvScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EmotionalIPV");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IPV");

                    b.Property<string>("IPVRelationship");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PhysicalIPV");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("SexualIPV");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("GbvScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.IptExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactsInvited");

                    b.Property<string>("Cough");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EvaluatedForIPT");

                    b.Property<string>("EverOnIPT");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("ICFActionTaken");

                    b.Property<string>("IPTClientWorkUp");

                    b.Property<string>("IndicationForIPT");

                    b.Property<string>("Lethargy");

                    b.Property<string>("NightSweats");

                    b.Property<string>("NoticeableWeightLoss");

                    b.Property<string>("OnIPT");

                    b.Property<string>("OnTBDrugs");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("StartAntiTBs");

                    b.Property<string>("StartIPT");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TBClinicalDiagnosis");

                    b.Property<DateTime?>("TBRxStartDate");

                    b.Property<string>("TBScreening");

                    b.Property<string>("TestResult");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("IptExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.OtzExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("ModulesCompletedToday");

                    b.Property<string>("ModulesPreviouslyCovered");

                    b.Property<DateTime?>("OTZEnrollmentDate");

                    b.Property<DateTime?>("OutcomeDate");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Remarks");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SupportGroupInvolvement");

                    b.Property<string>("TransferInStatus");

                    b.Property<string>("TransitionAttritionReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("OtzExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.OvcExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPIMSUniqueIdentifier");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledinCPIMS");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OVCEnrollmentDate");

                    b.Property<string>("OVCExitReason");

                    b.Property<string>("PartnerOfferingOVCServices");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RelationshipToClient");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("OvcExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<bool?>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Severity");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateLastUsed");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTPurpose");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("PreviousARTUse");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientBaselinesExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientBaselinesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract", b =>
                {
                    b.Property<int>("SiteCode");

                    b.Property<int>("PatientPK");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DatePreviousARTStart");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<Guid>("Id");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("Orphan");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentLocation");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentSubLocation");

                    b.Property<string>("PatientResidentVillage");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientType");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationATPMTCT");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("Status");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Village");

                    b.HasKey("SiteCode", "PatientPK");

                    b.HasAlternateKey("Id");

                    b.ToTable("PatientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientLaboratoryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateSampleTaken");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SampleType");

                    b.Property<string>("SatelliteName");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientLaboratoryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("QueueId");

                    b.Property<string>("RegimenChangeSwitchReason");

                    b.Property<string>("RegimenChangedSwitched");

                    b.Property<string>("RegimenLine");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("StopRegimenDate");

                    b.Property<string>("StopRegimenReason");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientStatusExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DeathDate");

                    b.Property<DateTime?>("EffectiveDiscontinuationDate");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("ReEnrollmentDate");

                    b.Property<string>("ReasonForDeath");

                    b.Property<int>("SiteCode");

                    b.Property<string>("SpecificDeathReason");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TOVerified");

                    b.Property<DateTime?>("TOVerifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientStatusExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<string>("Breastfeeding");

                    b.Property<string>("CNS");

                    b.Property<string>("CTXAdherence");

                    b.Property<string>("CVS");

                    b.Property<string>("Chest");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CurrentRegimen");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DifferentiatedCare");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("ENT");

                    b.Property<string>("Emr");

                    b.Property<string>("EverHadMenses");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<string>("GeneralExamination");

                    b.Property<string>("Genitourinary");

                    b.Property<decimal?>("GestationAge");

                    b.Property<string>("HCWConcern");

                    b.Property<decimal?>("Height");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LMP");

                    b.Property<string>("Menopausal");

                    b.Property<int?>("Muac");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("NoFPReason");

                    b.Property<string>("NutritionalStatus");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisUsed");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("PwP");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("RefillDate");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<string>("StabilityAssessment");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<string>("SystemExamination");

                    b.Property<string>("TCAReason");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("VisitBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PatientVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.EmrMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("EmrName");

                    b.Property<string>("EmrVersion");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("LastMoH731RunDate");

                    b.HasKey("Id");

                    b.ToTable("EmrMetrics");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("NUPI");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int>("PatientPk");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("HtsClientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientLinkageExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<DateTime>("DateEnrolled");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime>("ReferralDate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("HtsClientLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.HTSClientPartnerExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("HtsClientPartnerExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientLinkage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DatePrefferedToBeEnrolled");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityReferredTo");

                    b.Property<string>("HandedOverTo");

                    b.Property<string>("HandedOverToCadre");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<string>("ReportedCCCNumber");

                    b.Property<DateTime?>("ReportedStartARTDate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsClientsLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients", b =>
                {
                    b.Property<int>("SiteCode");

                    b.Property<int>("PatientPk");

                    b.Property<string>("County");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DoB");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<Guid>("Id");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientDisabled");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PriorityPopulationType");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SubCounty");

                    b.Property<string>("Ward");

                    b.HasKey("SiteCode", "PatientPk");

                    b.HasAlternateKey("Id");

                    b.ToTable("HtsClientsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientTests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approach");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("Consent");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("EntryPoint");

                    b.Property<string>("EverTestedForHiv");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalTestResult");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("MonthsSinceLastTest");

                    b.Property<string>("PatientGivenResult");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Setting");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TbScreening");

                    b.Property<DateTime?>("TestDate");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.Property<string>("TestStrategy");

                    b.Property<string>("TestType");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsClientTestsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientTracing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("TracingDate");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsClientTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsEligibilityExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlcoholSex");

                    b.Property<string>("AssessmentOutcome");

                    b.Property<string>("BreastfeedingMother");

                    b.Property<string>("CCCNumber");

                    b.Property<string>("ChildReasonsForIneligibility");

                    b.Property<string>("CondomBurst");

                    b.Property<string>("ContactWithTBCase");

                    b.Property<string>("Cough");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<string>("CurrentlyHasSTI");

                    b.Property<string>("CurrentlyOnPep");

                    b.Property<string>("CurrentlyOnPrep");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateLastModified");

                    b.Property<DateTime?>("DateTestedProvider");

                    b.Property<DateTime?>("DateTestedSelf");

                    b.Property<string>("Department");

                    b.Property<string>("EligibleForTest");

                    b.Property<string>("Emr");

                    b.Property<string>("EncounterId");

                    b.Property<string>("EverHadSTI");

                    b.Property<string>("EverHadSex");

                    b.Property<string>("EverHadTB");

                    b.Property<string>("EverOnPep");

                    b.Property<string>("EverOnPrep");

                    b.Property<string>("ExperiencedGBV");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("ForcedSex");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IsHealthWorker");

                    b.Property<string>("KeyPopulation");

                    b.Property<string>("KnownStatusPartner");

                    b.Property<string>("Lethargy");

                    b.Property<string>("MoneySex");

                    b.Property<string>("MothersStatus");

                    b.Property<string>("MultiplePartners");

                    b.Property<string>("NeedleStickInjuries");

                    b.Property<string>("NewPartner");

                    b.Property<string>("NightSweats");

                    b.Property<int?>("NumberOfPartners");

                    b.Property<string>("PartnerHIVStatus");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PatientType");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<string>("PriorityPopulation");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReasonsForIneligibility");

                    b.Property<string>("ReceivedServices");

                    b.Property<string>("ReferredForTesting");

                    b.Property<string>("RelationshipWithContact");

                    b.Property<string>("ResultOfHIV");

                    b.Property<string>("ResultOfHIVSelf");

                    b.Property<string>("ScreenedTB");

                    b.Property<string>("SexuallyActive");

                    b.Property<string>("SharedNeedle");

                    b.Property<int>("SiteCode");

                    b.Property<int?>("SpecificReasonForIneligibility");

                    b.Property<string>("StartedOnART");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TBStatus");

                    b.Property<string>("TestedHIVBefore");

                    b.Property<string>("TraditionalProcedures");

                    b.Property<string>("TypeGBV");

                    b.Property<string>("UnknownStatusPartner");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("WeightLoss");

                    b.Property<string>("WhoPerformedTest");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsEligibilityExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsPartnerNotificationServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateElicited");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityLinkedTo");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("LinkedToCare");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<int>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RelationsipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsPartnerNotificationServicesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsPartnerTracing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("TraceDate");

                    b.Property<string>("TraceOutcome");

                    b.Property<string>("TraceType");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsPartnerTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsRiskScores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateLastModified");

                    b.Property<string>("Description");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("EvaluationDate");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RiskFactors");

                    b.Property<decimal?>("RiskScore");

                    b.Property<int>("SiteCode");

                    b.Property<string>("SourceSysUUID");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsRiskScoresExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsTestKits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int>("PatientPk");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SyphilisResult");

                    b.Property<string>("TestKitExpiry1");

                    b.Property<string>("TestKitExpiry2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPk");

                    b.ToTable("HtsTestKitsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mgs.MetricMigrationExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Dataset");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("Metric");

                    b.Property<int>("MetricId");

                    b.Property<string>("MetricValue");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Stage");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.ToTable("MetricMigrationExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.AncVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ANCClinicNumber");

                    b.Property<int?>("ANCVisitNo");

                    b.Property<string>("AZTBabyDispense");

                    b.Property<string>("AntenatalExercises");

                    b.Property<int?>("BP");

                    b.Property<string>("BreastExam");

                    b.Property<string>("CACxScreen");

                    b.Property<string>("CACxScreenMethod");

                    b.Property<string>("ChronicIllness");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CounselledOn");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Deworming");

                    b.Property<string>("DiabetesTest");

                    b.Property<string>("Emr");

                    b.Property<string>("FGM");

                    b.Property<string>("FGMComplications");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<int?>("GestationWeeks");

                    b.Property<string>("HIVStatusBeforeANC");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest1Result");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTest2Result");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestType");

                    b.Property<string>("HIVTestingDone");

                    b.Property<decimal?>("Haemoglobin");

                    b.Property<decimal?>("Height");

                    b.Property<string>("IronSupplementsGiven");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MalariaProphylaxis");

                    b.Property<DateTime?>("MotherGivenHAART");

                    b.Property<string>("MotherProphylaxisGiven");

                    b.Property<string>("NVPBabyDispense");

                    b.Property<DateTime?>("NextAppointmentANC");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PartnerHIVStatusANC");

                    b.Property<string>("PartnerHIVTestingANC");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PostParturmFP");

                    b.Property<string>("PreventiveServices");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReceivedMosquitoNet");

                    b.Property<string>("ReferralReasons");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SyphilisTestDone");

                    b.Property<string>("SyphilisTestResults");

                    b.Property<string>("SyphilisTestType");

                    b.Property<string>("SyphilisTreated");

                    b.Property<string>("SyphilisTreatment");

                    b.Property<string>("TBScreening");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("TetanusDose");

                    b.Property<string>("UrinalysisVariables");

                    b.Property<DateTime?>("VLDate");

                    b.Property<string>("VLResult");

                    b.Property<string>("VLSampleTaken");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<int?>("WHOStaging");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("AncVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.CwcEnrolmentExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ARTMother");

                    b.Property<string>("ARTRegimenMother");

                    b.Property<DateTime?>("ARTStartDateMother");

                    b.Property<decimal?>("BirthLength");

                    b.Property<int?>("BirthOrder");

                    b.Property<string>("BirthType");

                    b.Property<string>("BirthWeight");

                    b.Property<string>("BreastFeeding");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<DateTime?>("Gestation");

                    b.Property<string>("HEI");

                    b.Property<string>("HEIDate");

                    b.Property<string>("HEIID");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherAlive");

                    b.Property<string>("MothersCCCNo");

                    b.Property<string>("MothersPkv");

                    b.Property<string>("NVP");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientIDCWC");

                    b.Property<int>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<string>("PlaceOfDelivery");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReferredFrom");

                    b.Property<DateTime?>("RegistrationAtCWC");

                    b.Property<DateTime?>("RegistrationAtHEI");

                    b.Property<int>("SiteCode");

                    b.Property<string>("SpecialCare");

                    b.Property<string>("SpecialNeeds");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TransferIn");

                    b.Property<string>("TransferInDate");

                    b.Property<string>("TransferredFrom");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("CwcEnrolmentExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.CwcVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DangerSigns");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Dewormed");

                    b.Property<string>("Disability");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FollowUP");

                    b.Property<decimal?>("Height");

                    b.Property<string>("Immunization");

                    b.Property<string>("InfantFeeding");

                    b.Property<string>("MNPsSupplementation");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MedicationGiven");

                    b.Property<string>("Milestones");

                    b.Property<DateTime?>("NextAppointment");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReceivedMosquitoNet");

                    b.Property<string>("ReferralReasons");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("Stunted");

                    b.Property<string>("TBAssessment");

                    b.Property<decimal?>("Temp");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("VitaminA");

                    b.Property<decimal?>("Weight");

                    b.Property<string>("WeightCategory");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("CwcVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.HeiExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BasellineVL");

                    b.Property<DateTime?>("BasellineVLDate");

                    b.Property<string>("ConfirmatoryPCR");

                    b.Property<DateTime?>("ConfirmatoryPCRDate");

                    b.Property<string>("DNAPCR1");

                    b.Property<DateTime?>("DNAPCR1Date");

                    b.Property<string>("DNAPCR2");

                    b.Property<DateTime?>("DNAPCR2Date");

                    b.Property<string>("DNAPCR3");

                    b.Property<DateTime?>("DNAPCR3Date");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalyAntibody");

                    b.Property<DateTime?>("FinalyAntibodyDate");

                    b.Property<string>("HEIExitCritearia");

                    b.Property<DateTime?>("HEIExitDate");

                    b.Property<string>("HEIHIVStatus");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("HeiExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MatVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ANCVisits");

                    b.Property<string>("AdmissionNumber");

                    b.Property<int?>("ApgarScore1");

                    b.Property<int?>("ApgarScore10");

                    b.Property<int?>("ApgarScore5");

                    b.Property<int?>("BabyBirthNumber");

                    b.Property<string>("BabyGivenProphylaxis");

                    b.Property<string>("BirthOutcome");

                    b.Property<string>("BirthWeight");

                    b.Property<string>("BirthWithDeformity");

                    b.Property<int?>("BloodLoss");

                    b.Property<string>("BloodLossVisual");

                    b.Property<string>("ChlorhexidineApplied");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("ConditonAfterDelivery");

                    b.Property<string>("CounselledOn");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateOfDelivery");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DeliveryComplications");

                    b.Property<int?>("DurationOfDelivery");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<int?>("GestationAtBirth");

                    b.Property<string>("HIV1Results");

                    b.Property<string>("HIV2Results");

                    b.Property<string>("HIVStatusLastANC");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestingDone");

                    b.Property<string>("InitiatedBF");

                    b.Property<string>("KangarooCare");

                    b.Property<DateTime?>("MaternalDeath");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherDischargeDate");

                    b.Property<string>("MotherGivenCTX");

                    b.Property<int?>("NoBabiesDelivered");

                    b.Property<string>("OnARTANC");

                    b.Property<string>("PartnerHIVStatusMAT");

                    b.Property<string>("PartnerHIVTestingMAT");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PlacentaComplete");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<string>("SexBaby");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<string>("StatusBabyDischarge");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SyphilisTestResults");

                    b.Property<string>("TetracyclineGiven");

                    b.Property<string>("UterotonicGiven");

                    b.Property<string>("VaginalExamination");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("VitaminKGiven");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("MatVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<string>("PatientHeiID");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<int>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("Status");

                    b.Property<string>("StatusAtCCC");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("MnchArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchEnrolmentExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("EDDFromLMP");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("EnrollmentDateAtMnch");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstVisitAnc");

                    b.Property<int>("Gravidae");

                    b.Property<string>("HIVStatusBeforeANC");

                    b.Property<DateTime?>("HIVTestDate");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("MnchNumber");

                    b.Property<string>("Parity");

                    b.Property<string>("PartnerHIVStatus");

                    b.Property<DateTime?>("PartnerHIVTestDate");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ServiceType");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<string>("StatusAtMnch");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("MnchEnrolmentExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchLabExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("LabReason");

                    b.Property<DateTime?>("OrderedbyDate");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMNCH_ID");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<DateTime?>("ReportedbyDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("MnchLabExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MotherBabyPairExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BabyPatientMncHeiID");

                    b.Property<int>("BabyPatientPK");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("MotherPatientMncHeiID");

                    b.Property<int>("MotherPatientPK");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientIDCCC");

                    b.Property<int>("PatientPK");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("MotherBabyPairExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract", b =>
                {
                    b.Property<int>("SiteCode");

                    b.Property<int>("PatientPK");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstEnrollmentAtMnch");

                    b.Property<string>("Gender");

                    b.Property<Guid>("Id");

                    b.Property<string>("InSchool");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientHeiID");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("Pkv");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("SiteCode", "PatientPK");

                    b.HasAlternateKey("Id");

                    b.ToTable("PatientMnchExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PncVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BP");

                    b.Property<string>("BabyConditon");

                    b.Property<string>("BabyFeeding");

                    b.Property<string>("Breast");

                    b.Property<string>("BreastExam");

                    b.Property<string>("CACxScreenMethod");

                    b.Property<string>("CACxScreenResults");

                    b.Property<string>("CSScar");

                    b.Property<string>("ClientScreenedCACx");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CounselledOnFP");

                    b.Property<string>("CoupleCounselled");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("DeliveryOutcome");

                    b.Property<string>("Emr");

                    b.Property<string>("Episiotomy");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Fistula");

                    b.Property<string>("GeneralCondition");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest1Result");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTest2Result");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestingDone");

                    b.Property<string>("HaematinicsGiven");

                    b.Property<string>("HasPallor");

                    b.Property<decimal?>("Height");

                    b.Property<string>("Immunization");

                    b.Property<string>("InfantFeeding");

                    b.Property<string>("InfantProphylaxisGiven");

                    b.Property<string>("Lochia");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MaternalComplications");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherProphylaxisGiven");

                    b.Property<DateTime?>("NextAppointmentPNC");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PNCRegisterNumber");

                    b.Property<int?>("PNCVisitNo");

                    b.Property<string>("PPH");

                    b.Property<string>("Pallor");

                    b.Property<string>("PartnerHIVResultPNC");

                    b.Property<string>("PartnerHIVTestingPNC");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PlaceOfDelivery");

                    b.Property<string>("PreventiveServices");

                    b.Property<string>("PriorHIVStatus");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReceivedFP");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TBScreening");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("UmbilicalCord");

                    b.Property<string>("UterusInvolution");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PncVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mts.IndicatorExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<string>("Indicator");

                    b.Property<DateTime?>("IndicatorDate");

                    b.Property<string>("IndicatorValue");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.ToTable("IndicatorExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract", b =>
                {
                    b.Property<int>("SiteCode");

                    b.Property<int>("PatientPK");

                    b.Property<string>("ClientPreviouslyonPrep");

                    b.Property<string>("ClientType");

                    b.Property<string>("County");

                    b.Property<string>("CountyofBirth");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateLastUsedPrev");

                    b.Property<DateTime?>("DateStartedPrEPattransferringfacility");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DatefirstinitiatedinPrepCare");

                    b.Property<DateTime?>("DateofBirth");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<Guid>("Id");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("LandMark");

                    b.Property<string>("Location");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("PatientID");

                    b.Property<string>("PopulationType");

                    b.Property<DateTime?>("PrepEnrollmentDate");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("PrevPrepReg");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReferralPoint");

                    b.Property<string>("Refferedfrom");

                    b.Property<string>("Sex");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SubCounty");

                    b.Property<string>("TransferFromFacility");

                    b.Property<string>("TransferIn");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Ward");

                    b.HasKey("SiteCode", "PatientPK");

                    b.HasAlternateKey("Id");

                    b.ToTable("PatientPrepExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<string>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Severity");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepBehaviourRiskExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientAssessments");

                    b.Property<string>("ClientRisk");

                    b.Property<string>("ClientWillingToTakePrep");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstEstablishPartnerStatus");

                    b.Property<DateTime?>("HIVPartnerARTStartDate");

                    b.Property<string>("HIVPartnerCCCnumber");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IsHIVPositivePartnerCurrentonART");

                    b.Property<string>("IsPartnerHighrisk");

                    b.Property<string>("MonthsknownHIVSerodiscordant");

                    b.Property<string>("NumberofchildrenWithPartner");

                    b.Property<string>("PartnerARTRisk");

                    b.Property<DateTime?>("PartnerEnrolledtoCCC");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PrEPDeclineReason");

                    b.Property<string>("PrepNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("ReferralToOtherPrevServices");

                    b.Property<string>("RiskReductionEducationOffered");

                    b.Property<string>("SexPartnerHIVStatus");

                    b.Property<string>("SexWithoutCondom");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepBehaviourRiskExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepCareTerminationExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateOfLastPrepDose");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepCareTerminationExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepLabExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("SampleDate");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<DateTime?>("TestResultDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepLabExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("RegimenPrescribed");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdherenceDone");

                    b.Property<string>("AdherenceOutcome");

                    b.Property<string>("AdherenceReasons");

                    b.Property<decimal?>("BMI");

                    b.Property<string>("BirthDefects");

                    b.Property<string>("BloodPressure");

                    b.Property<string>("Breastfeeding");

                    b.Property<string>("Circumcised");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CondomsIssued");

                    b.Property<string>("ContraindicationsPrep");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<string>("EncounterId");

                    b.Property<string>("FPMethods");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningStatus");

                    b.Property<decimal?>("Height");

                    b.Property<string>("HepatitisBPositiveResult");

                    b.Property<string>("HepatitisCPositiveResult");

                    b.Property<string>("HtsNumber");

                    b.Property<DateTime?>("LMP");

                    b.Property<string>("MenopausalStatus");

                    b.Property<string>("MonthsPrescribed");

                    b.Property<DateTime?>("NextAppointment");

                    b.Property<string>("PatientID");

                    b.Property<int>("PatientPK");

                    b.Property<string>("PlanningToGetPregnant");

                    b.Property<DateTime?>("PregnancyEndDate");

                    b.Property<string>("PregnancyEnded");

                    b.Property<string>("PregnancyOutcome");

                    b.Property<string>("PregnancyPlanned");

                    b.Property<string>("PregnantAtThisVisit");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("PrepPrescribed");

                    b.Property<string>("PrepTreatmentPlan");

                    b.Property<bool?>("Processed");

                    b.Property<string>("Project");

                    b.Property<string>("QueueId");

                    b.Property<string>("Reasonfornotgivingnextappointment");

                    b.Property<string>("RegimenPrescribed");

                    b.Property<string>("STIScreening");

                    b.Property<string>("STISymptoms");

                    b.Property<string>("STITreated");

                    b.Property<int>("SiteCode");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("SymptomsAcuteHIV");

                    b.Property<string>("Temperature");

                    b.Property<string>("Tobegivennextappointment");

                    b.Property<string>("TreatedForHepB");

                    b.Property<string>("TreatedForHepC");

                    b.Property<string>("VMMCReferral");

                    b.Property<string>("VaccinationForHepBStarted");

                    b.Property<string>("VaccinationForHepCStarted");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitID");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode", "PatientPK");

                    b.ToTable("PrepVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Diff.DiffLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChangesLoaded");

                    b.Property<string>("Docket");

                    b.Property<string>("Extract");

                    b.Property<bool>("ExtractsSent");

                    b.Property<DateTime?>("LastCreated");

                    b.Property<DateTime?>("LastModified");

                    b.Property<DateTime?>("LastSent");

                    b.Property<DateTime?>("MaxCreated");

                    b.Property<DateTime?>("MaxModified");

                    b.Property<int>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("DiffLogs");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ExtractHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ExtractId");

                    b.Property<int?>("Stats");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("StatusDate");

                    b.Property<string>("StatusInfo");

                    b.HasKey("Id");

                    b.ToTable("ExtractHistory");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.PsmartStage", b =>
                {
                    b.Property<Guid>("EId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DateSent");

                    b.Property<DateTime>("DateStaged");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<string>("Emr");

                    b.Property<int?>("Id");

                    b.Property<string>("RequestId");

                    b.Property<string>("Shr");

                    b.Property<string>("Status")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Status_Date");

                    b.Property<string>("Uuid");

                    b.HasKey("EId");

                    b.ToTable("PsmartStage");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Cbs.TempMasterPatientIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birth_Certificate");

                    b.Property<string>("CCC_Number");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstName_Normalized");

                    b.Property<string>("Gender");

                    b.Property<double?>("JaroWinklerScore");

                    b.Property<string>("LastName");

                    b.Property<string>("LastName_Normalized");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MiddleName_Normalized");

                    b.Property<string>("NHIF_Number");

                    b.Property<string>("National_ID");

                    b.Property<string>("PatientAlternatePhoneNumber");

                    b.Property<string>("PatientCounty");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientPhoneNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientSubCounty");

                    b.Property<string>("PatientVillage");

                    b.Property<string>("Serial");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartARTRegimenCode");

                    b.Property<string>("StartARTRegimenDesc");

                    b.Property<string>("TB_Number");

                    b.Property<string>("dmFirstName");

                    b.Property<string>("dmLastName");

                    b.Property<string>("dmMiddleName");

                    b.Property<string>("dmPKValue");

                    b.Property<string>("dmPKValueDoB");

                    b.Property<string>("sxFirstName");

                    b.Property<string>("sxLastName");

                    b.Property<string>("sxMiddleName");

                    b.Property<string>("sxPKValue");

                    b.Property<string>("sxPKValueDoB");

                    b.Property<string>("sxdmPKValue");

                    b.Property<string>("sxdmPKValueDoB");

                    b.HasKey("Id");

                    b.ToTable("TempMasterPatientIndices");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Crs.TempClientRegistryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlienIdNo");

                    b.Property<string>("AlternativePhoneNumber");

                    b.Property<string>("BirthCertificateNumber");

                    b.Property<string>("CCCNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("County");

                    b.Property<string>("CurrentOnART");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime?>("DateOfHIVdiagnosis");

                    b.Property<DateTime?>("DateOfInitiation");

                    b.Property<DateTime?>("DateOfLastEncounter");

                    b.Property<DateTime?>("DateOfLastViralLoad");

                    b.Property<string>("DrivingLicenseNumber");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstName");

                    b.Property<string>("HighestLevelOfEducation");

                    b.Property<string>("HudumaNumber");

                    b.Property<string>("Landmark");

                    b.Property<string>("LastName");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<string>("LastViralLoadResult");

                    b.Property<string>("Location");

                    b.Property<string>("MFLCode");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NameOfNextOfKin");

                    b.Property<string>("NationalId");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("NextOfKinRelationship");

                    b.Property<string>("NextOfKinTelNo");

                    b.Property<string>("Occupation");

                    b.Property<string>("Passport");

                    b.Property<string>("PatientClinicNumber");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Project");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SpousePhoneNumber");

                    b.Property<string>("SubCounty");

                    b.Property<string>("TreatmentOutcome");

                    b.Property<string>("Village");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("TempClientRegistryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempAllergiesChronicIllnessExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("AllergicReaction");

                    b.Property<string>("AllergyCausativeAgent");

                    b.Property<DateTime?>("AllergyOnsetDate");

                    b.Property<string>("AllergySeverity");

                    b.Property<string>("CNS");

                    b.Property<string>("CVS");

                    b.Property<bool>("CheckError");

                    b.Property<string>("Chest");

                    b.Property<string>("ChronicIllness");

                    b.Property<DateTime?>("ChronicOnsetDate");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("ENT");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Genitourinary");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("knownAllergies");

                    b.HasKey("Id");

                    b.ToTable("TempAllergiesChronicIllnessExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempAllergiesChronicIllnessExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("AllergicReaction");

                    b.Property<string>("AllergyCausativeAgent");

                    b.Property<DateTime?>("AllergyOnsetDate");

                    b.Property<string>("AllergySeverity");

                    b.Property<string>("CNS");

                    b.Property<string>("CVS");

                    b.Property<bool>("CheckError");

                    b.Property<string>("Chest");

                    b.Property<string>("ChronicIllness");

                    b.Property<DateTime?>("ChronicOnsetDate");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("ENT");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Genitourinary");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("knownAllergies");

                    b.HasKey("Id");

                    b.ToTable("vTempAllergiesChronicIllnessExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempAllergiesChronicIllnessExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("AllergicReaction");

                    b.Property<string>("AllergyCausativeAgent");

                    b.Property<DateTime?>("AllergyOnsetDate");

                    b.Property<string>("AllergySeverity");

                    b.Property<string>("CNS");

                    b.Property<string>("CVS");

                    b.Property<string>("Chest");

                    b.Property<string>("ChronicIllness");

                    b.Property<DateTime?>("ChronicOnsetDate");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("ENT");

                    b.Property<string>("Extract");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Genitourinary");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("knownAllergies");

                    b.HasKey("Id");

                    b.ToTable("vTempAllergiesChronicIllnessExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempContactListingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactAge");

                    b.Property<string>("ContactMaritalStatus");

                    b.Property<int?>("ContactPatientPK");

                    b.Property<string>("ContactSex");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IPVScreeningOutcome");

                    b.Property<string>("IpvScreening");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipWithPatient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempContactListingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempCovidExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdmissionEndDate");

                    b.Property<DateTime?>("AdmissionStartDate");

                    b.Property<string>("AdmissionStatus");

                    b.Property<string>("AdmissionStatusSinceLastVisit");

                    b.Property<string>("AdmissionUnit");

                    b.Property<string>("AdmissionUnitSinceLastVisit");

                    b.Property<string>("BoosterDose");

                    b.Property<DateTime?>("BoosterDoseDate");

                    b.Property<string>("BoosterGiven");

                    b.Property<string>("COVID19PositiveSinceLasVisit");

                    b.Property<DateTime?>("COVID19TestDate");

                    b.Property<DateTime?>("COVID19TestDateSinceLastVisit");

                    b.Property<string>("COVID19TestResult");

                    b.Property<string>("CauseOfDeath");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("Covid19AssessmentDate");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateGivenFirstDose");

                    b.Property<DateTime?>("DateGivenSecondDose");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EverCOVID19Positive");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FirstDoseVaccineAdministered");

                    b.Property<string>("MissedAppointmentDueToCOVID19");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientStatus");

                    b.Property<string>("PatientStatusSinceLastVisit");

                    b.Property<string>("PatientVentilated");

                    b.Property<string>("Project");

                    b.Property<string>("ReceivedCOVID19Vaccine");

                    b.Property<string>("SecondDoseVaccineAdministered");

                    b.Property<string>("Sequence");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SupplementalOxygenReceived");

                    b.Property<string>("TracingFinalOutcome");

                    b.Property<string>("VaccinationStatus");

                    b.Property<string>("VaccineVerification");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempCovidExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDefaulterTracingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttemptNumber");

                    b.Property<DateTime?>("BookingDate");

                    b.Property<string>("CauseOfDeath");

                    b.Property<bool>("CheckError");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IsFinalTrace");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.Property<string>("TrueStatus");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempDefaulterTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDepressionScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("DepressionAssesmentScore");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PHQ9_1");

                    b.Property<string>("PHQ9_2");

                    b.Property<string>("PHQ9_3");

                    b.Property<string>("PHQ9_4");

                    b.Property<string>("PHQ9_5");

                    b.Property<string>("PHQ9_6");

                    b.Property<string>("PHQ9_7");

                    b.Property<string>("PHQ9_8");

                    b.Property<string>("PHQ9_9");

                    b.Property<string>("PHQ_9_rating");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempDepressionScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDepressionScreeningExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("DepressionAssesmentScore");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PHQ9_1");

                    b.Property<string>("PHQ9_2");

                    b.Property<string>("PHQ9_3");

                    b.Property<string>("PHQ9_4");

                    b.Property<string>("PHQ9_5");

                    b.Property<string>("PHQ9_6");

                    b.Property<string>("PHQ9_7");

                    b.Property<string>("PHQ9_8");

                    b.Property<string>("PHQ9_9");

                    b.Property<string>("PHQ_9_rating");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempDepressionScreeningExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDepressionScreeningExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("DepressionAssesmentScore");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PHQ9_1");

                    b.Property<string>("PHQ9_2");

                    b.Property<string>("PHQ9_3");

                    b.Property<string>("PHQ9_4");

                    b.Property<string>("PHQ9_5");

                    b.Property<string>("PHQ9_6");

                    b.Property<string>("PHQ9_7");

                    b.Property<string>("PHQ9_8");

                    b.Property<string>("PHQ9_9");

                    b.Property<string>("PHQ_9_rating");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempDepressionScreeningExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDrugAlcoholScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DrinkingAlcohol");

                    b.Property<string>("DrugUse");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Smoking");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempDrugAlcoholScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDrugAlcoholScreeningExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DrinkingAlcohol");

                    b.Property<string>("DrugUse");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Smoking");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempDrugAlcoholScreeningExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempDrugAlcoholScreeningExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DrinkingAlcohol");

                    b.Property<string>("DrugUse");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Smoking");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempDrugAlcoholScreeningExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempEnhancedAdherenceCounsellingExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateOfFirstSession");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EACAdherencePlan");

                    b.Property<string>("EACBehaviouralBarrier_1");

                    b.Property<string>("EACBehaviouralBarrier_2");

                    b.Property<string>("EACBehaviouralBarrier_3");

                    b.Property<string>("EACBehaviouralBarrier_4");

                    b.Property<string>("EACBehaviouralBarrier_5");

                    b.Property<string>("EACCognitiveBarrier");

                    b.Property<string>("EACEconBarrier_1");

                    b.Property<string>("EACEconBarrier_2");

                    b.Property<string>("EACEconBarrier_3");

                    b.Property<string>("EACEconBarrier_4");

                    b.Property<string>("EACEconBarrier_5");

                    b.Property<string>("EACEconBarrier_6");

                    b.Property<string>("EACEconBarrier_7");

                    b.Property<string>("EACEconBarrier_8");

                    b.Property<string>("EACEmotionalBarriers_1");

                    b.Property<string>("EACEmotionalBarriers_2");

                    b.Property<DateTime?>("EACFollowupDate");

                    b.Property<string>("EACHomevisit");

                    b.Property<string>("EACRecievedVL");

                    b.Property<string>("EACReferral");

                    b.Property<string>("EACReferralApp");

                    b.Property<string>("EACReferralExperience");

                    b.Property<string>("EACReviewImprovement");

                    b.Property<string>("EACReviewMissedDoses");

                    b.Property<string>("EACReviewStrategy");

                    b.Property<string>("EACVL");

                    b.Property<string>("EACVLConcerns");

                    b.Property<string>("EACVLThoughts");

                    b.Property<string>("EACWayForward");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("MMAS4_1");

                    b.Property<string>("MMAS4_2");

                    b.Property<string>("MMAS4_3");

                    b.Property<string>("MMAS4_4");

                    b.Property<string>("MMSA8_1");

                    b.Property<string>("MMSA8_2");

                    b.Property<string>("MMSA8_3");

                    b.Property<string>("MMSA8_4");

                    b.Property<string>("MMSAScore");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<int?>("PillCountAdherence");

                    b.Property<string>("Project");

                    b.Property<int?>("SessionNumber");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempEnhancedAdherenceCounsellingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempEnhancedAdherenceCounsellingExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateOfFirstSession");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EACAdherencePlan");

                    b.Property<string>("EACBehaviouralBarrier_1");

                    b.Property<string>("EACBehaviouralBarrier_2");

                    b.Property<string>("EACBehaviouralBarrier_3");

                    b.Property<string>("EACBehaviouralBarrier_4");

                    b.Property<string>("EACBehaviouralBarrier_5");

                    b.Property<string>("EACCognitiveBarrier");

                    b.Property<string>("EACEconBarrier_1");

                    b.Property<string>("EACEconBarrier_2");

                    b.Property<string>("EACEconBarrier_3");

                    b.Property<string>("EACEconBarrier_4");

                    b.Property<string>("EACEconBarrier_5");

                    b.Property<string>("EACEconBarrier_6");

                    b.Property<string>("EACEconBarrier_7");

                    b.Property<string>("EACEconBarrier_8");

                    b.Property<string>("EACEmotionalBarriers_1");

                    b.Property<string>("EACEmotionalBarriers_2");

                    b.Property<DateTime?>("EACFollowupDate");

                    b.Property<string>("EACHomevisit");

                    b.Property<string>("EACRecievedVL");

                    b.Property<string>("EACReferral");

                    b.Property<string>("EACReferralApp");

                    b.Property<string>("EACReferralExperience");

                    b.Property<string>("EACReviewImprovement");

                    b.Property<string>("EACReviewMissedDoses");

                    b.Property<string>("EACReviewStrategy");

                    b.Property<string>("EACVL");

                    b.Property<string>("EACVLConcerns");

                    b.Property<string>("EACVLThoughts");

                    b.Property<string>("EACWayForward");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("MMAS4_1");

                    b.Property<string>("MMAS4_2");

                    b.Property<string>("MMAS4_3");

                    b.Property<string>("MMAS4_4");

                    b.Property<string>("MMSA8_1");

                    b.Property<string>("MMSA8_2");

                    b.Property<string>("MMSA8_3");

                    b.Property<string>("MMSA8_4");

                    b.Property<string>("MMSAScore");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<int?>("PillCountAdherence");

                    b.Property<string>("Project");

                    b.Property<int?>("SessionNumber");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempEnhancedAdherenceCounsellingExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempEnhancedAdherenceCounsellingExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("DateOfFirstSession");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EACAdherencePlan");

                    b.Property<string>("EACBehaviouralBarrier_1");

                    b.Property<string>("EACBehaviouralBarrier_2");

                    b.Property<string>("EACBehaviouralBarrier_3");

                    b.Property<string>("EACBehaviouralBarrier_4");

                    b.Property<string>("EACBehaviouralBarrier_5");

                    b.Property<string>("EACCognitiveBarrier");

                    b.Property<string>("EACEconBarrier_1");

                    b.Property<string>("EACEconBarrier_2");

                    b.Property<string>("EACEconBarrier_3");

                    b.Property<string>("EACEconBarrier_4");

                    b.Property<string>("EACEconBarrier_5");

                    b.Property<string>("EACEconBarrier_6");

                    b.Property<string>("EACEconBarrier_7");

                    b.Property<string>("EACEconBarrier_8");

                    b.Property<string>("EACEmotionalBarriers_1");

                    b.Property<string>("EACEmotionalBarriers_2");

                    b.Property<DateTime?>("EACFollowupDate");

                    b.Property<string>("EACHomevisit");

                    b.Property<string>("EACRecievedVL");

                    b.Property<string>("EACReferral");

                    b.Property<string>("EACReferralApp");

                    b.Property<string>("EACReferralExperience");

                    b.Property<string>("EACReviewImprovement");

                    b.Property<string>("EACReviewMissedDoses");

                    b.Property<string>("EACReviewStrategy");

                    b.Property<string>("EACVL");

                    b.Property<string>("EACVLConcerns");

                    b.Property<string>("EACVLThoughts");

                    b.Property<string>("EACWayForward");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("MMAS4_1");

                    b.Property<string>("MMAS4_2");

                    b.Property<string>("MMAS4_3");

                    b.Property<string>("MMAS4_4");

                    b.Property<string>("MMSA8_1");

                    b.Property<string>("MMSA8_2");

                    b.Property<string>("MMSA8_3");

                    b.Property<string>("MMSA8_4");

                    b.Property<string>("MMSAScore");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<int?>("PillCountAdherence");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SessionNumber");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempEnhancedAdherenceCounsellingExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempGbvScreeningExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EmotionalIPV");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IPV");

                    b.Property<string>("IPVRelationship");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PhysicalIPV");

                    b.Property<string>("Project");

                    b.Property<string>("SexualIPV");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempGbvScreeningExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempGbvScreeningExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EmotionalIPV");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("IPV");

                    b.Property<string>("IPVRelationship");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PhysicalIPV");

                    b.Property<string>("Project");

                    b.Property<string>("SexualIPV");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempGbvScreeningExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempGbvScreeningExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EmotionalIPV");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("IPV");

                    b.Property<string>("IPVRelationship");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PhysicalIPV");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("SexualIPV");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempGbvScreeningExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempIptExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactsInvited");

                    b.Property<string>("Cough");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EvaluatedForIPT");

                    b.Property<string>("EverOnIPT");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("ICFActionTaken");

                    b.Property<string>("IPTClientWorkUp");

                    b.Property<string>("IndicationForIPT");

                    b.Property<string>("Lethargy");

                    b.Property<string>("NightSweats");

                    b.Property<string>("NoticeableWeightLoss");

                    b.Property<string>("OnIPT");

                    b.Property<string>("OnTBDrugs");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StartAntiTBs");

                    b.Property<string>("StartIPT");

                    b.Property<string>("TBClinicalDiagnosis");

                    b.Property<DateTime?>("TBRxStartDate");

                    b.Property<string>("TBScreening");

                    b.Property<string>("TestResult");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempIptExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempIptExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactsInvited");

                    b.Property<string>("Cough");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EvaluatedForIPT");

                    b.Property<string>("EverOnIPT");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("ICFActionTaken");

                    b.Property<string>("IPTClientWorkUp");

                    b.Property<string>("IndicationForIPT");

                    b.Property<string>("Lethargy");

                    b.Property<string>("NightSweats");

                    b.Property<string>("NoticeableWeightLoss");

                    b.Property<string>("OnIPT");

                    b.Property<string>("OnTBDrugs");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StartAntiTBs");

                    b.Property<string>("StartIPT");

                    b.Property<string>("TBClinicalDiagnosis");

                    b.Property<DateTime?>("TBRxStartDate");

                    b.Property<string>("TBScreening");

                    b.Property<string>("TestResult");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempIptExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempIptExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactsInvited");

                    b.Property<string>("Cough");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EvaluatedForIPT");

                    b.Property<string>("EverOnIPT");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("Field");

                    b.Property<string>("ICFActionTaken");

                    b.Property<string>("IPTClientWorkUp");

                    b.Property<string>("IndicationForIPT");

                    b.Property<string>("Lethargy");

                    b.Property<string>("NightSweats");

                    b.Property<string>("NoticeableWeightLoss");

                    b.Property<string>("OnIPT");

                    b.Property<string>("OnTBDrugs");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StartAntiTBs");

                    b.Property<string>("StartIPT");

                    b.Property<string>("Summary");

                    b.Property<string>("TBClinicalDiagnosis");

                    b.Property<DateTime?>("TBRxStartDate");

                    b.Property<string>("TBScreening");

                    b.Property<string>("TestResult");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempIptExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOtzExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("ModulesCompletedToday");

                    b.Property<string>("ModulesPreviouslyCovered");

                    b.Property<DateTime?>("OTZEnrollmentDate");

                    b.Property<DateTime?>("OutcomeDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Remarks");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SupportGroupInvolvement");

                    b.Property<string>("TransferInStatus");

                    b.Property<string>("TransitionAttritionReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempOtzExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOtzExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("ModulesCompletedToday");

                    b.Property<string>("ModulesPreviouslyCovered");

                    b.Property<DateTime?>("OTZEnrollmentDate");

                    b.Property<DateTime?>("OutcomeDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Remarks");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SupportGroupInvolvement");

                    b.Property<string>("TransferInStatus");

                    b.Property<string>("TransitionAttritionReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempOtzExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOtzExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("ModulesCompletedToday");

                    b.Property<string>("ModulesPreviouslyCovered");

                    b.Property<DateTime?>("OTZEnrollmentDate");

                    b.Property<DateTime?>("OutcomeDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("Remarks");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("SupportGroupInvolvement");

                    b.Property<string>("TransferInStatus");

                    b.Property<string>("TransitionAttritionReason");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempOtzExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOvcExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPIMSUniqueIdentifier");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledinCPIMS");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OVCEnrollmentDate");

                    b.Property<string>("OVCExitReason");

                    b.Property<string>("PartnerOfferingOVCServices");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToClient");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempOvcExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOvcExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPIMSUniqueIdentifier");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledinCPIMS");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OVCEnrollmentDate");

                    b.Property<string>("OVCExitReason");

                    b.Property<string>("PartnerOfferingOVCServices");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToClient");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempOvcExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempOvcExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPIMSUniqueIdentifier");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EnrolledinCPIMS");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<DateTime?>("OVCEnrollmentDate");

                    b.Property<string>("OVCExitReason");

                    b.Property<string>("PartnerOfferingOVCServices");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RelationshipToClient");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempOvcExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<bool?>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("TempPatientAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<DateTime>("AdverseEventEndDate");

                    b.Property<DateTime>("AdverseEventStartDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientAdverseEventExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientAdverseEventExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<DateTime>("AdverseEventEndDate");

                    b.Property<DateTime>("AdverseEventStartDate");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientAdverseEventExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateLastUsed");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTPurpose");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("PreviousARTUse");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.HasKey("Id");

                    b.ToTable("TempPatientArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeARTStart");

                    b.Property<decimal?>("AgeEnrollment");

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Provider");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientArtExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientArtExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AgeLastVisit");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Gender");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PreviousARTRegimen");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTAtThisFacility");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientArtExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("TempPatientBaselinesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientBaselinesExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientBaselinesExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<int?>("bCD4");

                    b.Property<DateTime?>("bCD4Date");

                    b.Property<int?>("bWAB");

                    b.Property<DateTime?>("bWABDate");

                    b.Property<int?>("bWHO");

                    b.Property<DateTime?>("bWHODate");

                    b.Property<int?>("eCD4");

                    b.Property<DateTime?>("eCD4Date");

                    b.Property<int?>("eWAB");

                    b.Property<DateTime?>("eWABDate");

                    b.Property<int?>("eWHO");

                    b.Property<DateTime?>("eWHODate");

                    b.Property<int?>("lastCD4");

                    b.Property<DateTime?>("lastCD4Date");

                    b.Property<int?>("lastWAB");

                    b.Property<DateTime?>("lastWABDate");

                    b.Property<int?>("lastWHO");

                    b.Property<DateTime?>("lastWHODate");

                    b.Property<int?>("m12CD4");

                    b.Property<DateTime?>("m12CD4Date");

                    b.Property<int?>("m6CD4");

                    b.Property<DateTime?>("m6CD4Date");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientBaselinesExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("Orphan");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentLocation");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentSubLocation");

                    b.Property<string>("PatientResidentVillage");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientType");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtPMTCT");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Village");

                    b.HasKey("Id");

                    b.ToTable("TempPatientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ContactRelation");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime?>("DateConfirmedHIVPositive");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("District");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Orphan");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentLocation");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentSubLocation");

                    b.Property<string>("PatientResidentVillage");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("PatientSource");

                    b.Property<string>("PatientType");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PreviousARTExposure");

                    b.Property<DateTime?>("PreviousARTStartDate");

                    b.Property<string>("Project");

                    b.Property<string>("Region");

                    b.Property<DateTime?>("RegistrationATPMTCT");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<DateTime?>("RegistrationAtTBClinic");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusAtCCC");

                    b.Property<string>("StatusAtPMTCT");

                    b.Property<string>("StatusAtTBClinic");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Village");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("NUPI");

                    b.Property<string>("Orphan");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentLocation");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentSubLocation");

                    b.Property<string>("PatientResidentVillage");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("PatientType");

                    b.Property<string>("PopulationType");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateSampleTaken");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SampleType");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("TempPatientLaboratoryExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientLaboratoryExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientLaboratoryExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<int?>("EnrollmentTest");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<DateTime?>("OrderedByDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Reason");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("ReportedByDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<string>("Type");

                    b.Property<int?>("VisitId");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientLaboratoryExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("RegimenChangeSwitchReason");

                    b.Property<string>("RegimenChangedSwitched");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StopRegimenDate");

                    b.Property<string>("StopRegimenReason");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempPatientPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TreatmentType");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientPharmacyExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientPharmacyExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<string>("Drug");

                    b.Property<decimal?>("Duration");

                    b.Property<DateTime?>("ExpectedReturn");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PeriodTaken");

                    b.Property<string>("ProphylaxisType");

                    b.Property<string>("Provider");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RegimenLine");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TreatmentType");

                    b.Property<string>("Type");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientPharmacyExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DeathDate");

                    b.Property<DateTime?>("EffectiveDiscontinuationDate");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReEnrollmentDate");

                    b.Property<string>("ReasonForDeath");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SpecificDeathReason");

                    b.Property<string>("TOVerified");

                    b.Property<DateTime?>("TOVerifiedDate");

                    b.HasKey("Id");

                    b.ToTable("TempPatientStatusExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientStatusExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientStatusExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDescription");

                    b.Property<string>("ExitReason");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientStatusExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abdomen");

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<string>("Breastfeeding");

                    b.Property<string>("CNS");

                    b.Property<string>("CTXAdherence");

                    b.Property<string>("CVS");

                    b.Property<bool>("CheckError");

                    b.Property<string>("Chest");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CurrentRegimen");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DifferentiatedCare");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("ENT");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EverHadMenses");

                    b.Property<string>("Eyes");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<string>("GeneralExamination");

                    b.Property<string>("Genitourinary");

                    b.Property<decimal?>("GestationAge");

                    b.Property<string>("HCWConcern");

                    b.Property<decimal?>("Height");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LMP");

                    b.Property<string>("Menopausal");

                    b.Property<int?>("Muac");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("NoFPReason");

                    b.Property<string>("NutritionalStatus");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<string>("Project");

                    b.Property<string>("ProphylaxisUsed");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("PwP");

                    b.Property<DateTime?>("RefillDate");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Skin");

                    b.Property<string>("StabilityAssessment");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<string>("SystemExamination");

                    b.Property<string>("TCAReason");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("VisitBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("TempPatientVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("DifferentiatedCare");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<string>("Project");

                    b.Property<string>("PwP");

                    b.Property<DateTime?>("RefillDate");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StabilityAssessment");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientVisitExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Dwh.TempPatientVisitExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adherence");

                    b.Property<string>("AdherenceCategory");

                    b.Property<string>("BP");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("DifferentiatedCare");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Extract");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningMethod");

                    b.Property<string>("Field");

                    b.Property<decimal?>("GestationAge");

                    b.Property<decimal?>("Height");

                    b.Property<string>("KeyPopulationType");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("NextAppointmentDate");

                    b.Property<string>("OI");

                    b.Property<DateTime?>("OIDate");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<string>("PwP");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("RefillDate");

                    b.Property<DateTime?>("SecondlineRegimenChangeDate");

                    b.Property<string>("SecondlineRegimenChangeReason");

                    b.Property<string>("Service");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StabilityAssessment");

                    b.Property<DateTime?>("SubstitutionFirstlineRegimenDate");

                    b.Property<string>("SubstitutionFirstlineRegimenReason");

                    b.Property<DateTime?>("SubstitutionSecondlineRegimenDate");

                    b.Property<string>("SubstitutionSecondlineRegimenReason");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitId");

                    b.Property<string>("VisitType");

                    b.Property<string>("WABStage");

                    b.Property<int?>("WHOStage");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("vTempPatientVisitExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientLinkage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DatePrefferedToBeEnrolled");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityReferredTo");

                    b.Property<string>("HandedOverTo");

                    b.Property<string>("HandedOverToCadre");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<string>("ReportedCCCNumber");

                    b.Property<DateTime?>("ReportedStartARTDate");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientsLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientLinkageError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("DatePrefferedToBeEnrolled");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityReferredTo");

                    b.Property<string>("HandedOverTo");

                    b.Property<string>("HandedOverToCadre");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<string>("ReportedCCCNumber");

                    b.Property<DateTime?>("ReportedStartARTDate");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientLinkageError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientLinkageErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("DatePrefferedToBeEnrolled");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityReferredTo");

                    b.Property<string>("Field");

                    b.Property<string>("HandedOverTo");

                    b.Property<string>("HandedOverToCadre");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<string>("ReportedCCCNumber");

                    b.Property<DateTime?>("ReportedStartARTDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientsLinkageExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClients", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("County");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PriorityPopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SubCounty");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientsError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("County");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PriorityPopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SubCounty");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientsError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientsErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("County");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("PriorityPopulationType");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SubCounty");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientsExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approach");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("Consent");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("EntryPoint");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EverTestedForHiv");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalTestResult");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("MonthsSinceLastTest");

                    b.Property<string>("PatientGivenResult");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<string>("Setting");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TbScreening");

                    b.Property<DateTime?>("TestDate");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.Property<string>("TestStrategy");

                    b.Property<string>("TestType");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientTestsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTestsError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approach");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("Consent");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("EntryPoint");

                    b.Property<string>("EverTestedForHiv");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalTestResult");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("MonthsSinceLastTest");

                    b.Property<string>("PatientGivenResult");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<string>("Setting");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TbScreening");

                    b.Property<DateTime?>("TestDate");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.Property<string>("TestStrategy");

                    b.Property<string>("TestType");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientTestsError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTestsErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approach");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("Consent");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("EntryPoint");

                    b.Property<string>("EverTestedForHiv");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("FinalTestResult");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("MonthsSinceLastTest");

                    b.Property<string>("PatientGivenResult");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("Setting");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TbScreening");

                    b.Property<DateTime?>("TestDate");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.Property<string>("TestStrategy");

                    b.Property<string>("TestType");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientTestsExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTracing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("TracingDate");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTracingError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("TracingDate");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientTracingError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsClientTracingErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<DateTime?>("TracingDate");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("TracingType");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsClientTracingExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsEligibilityExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlcoholSex");

                    b.Property<string>("AssessmentOutcome");

                    b.Property<string>("BreastfeedingMother");

                    b.Property<string>("CCCNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ChildReasonsForIneligibility");

                    b.Property<string>("CondomBurst");

                    b.Property<string>("ContactWithTBCase");

                    b.Property<string>("Cough");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<string>("CurrentlyHasSTI");

                    b.Property<string>("CurrentlyOnPep");

                    b.Property<string>("CurrentlyOnPrep");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateLastModified");

                    b.Property<DateTime?>("DateTestedProvider");

                    b.Property<DateTime?>("DateTestedSelf");

                    b.Property<string>("Department");

                    b.Property<string>("EligibleForTest");

                    b.Property<string>("Emr");

                    b.Property<string>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<string>("EverHadSTI");

                    b.Property<string>("EverHadSex");

                    b.Property<string>("EverHadTB");

                    b.Property<string>("EverOnPep");

                    b.Property<string>("EverOnPrep");

                    b.Property<string>("ExperiencedGBV");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Fever");

                    b.Property<string>("ForcedSex");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IsHealthWorker");

                    b.Property<string>("KeyPopulation");

                    b.Property<string>("KnownStatusPartner");

                    b.Property<string>("Lethargy");

                    b.Property<string>("MoneySex");

                    b.Property<string>("MothersStatus");

                    b.Property<string>("MultiplePartners");

                    b.Property<string>("NeedleStickInjuries");

                    b.Property<string>("NewPartner");

                    b.Property<string>("NightSweats");

                    b.Property<int?>("NumberOfPartners");

                    b.Property<string>("PartnerHIVStatus");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PatientType");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Pregnant");

                    b.Property<string>("PriorityPopulation");

                    b.Property<string>("Project");

                    b.Property<string>("ReasonsForIneligibility");

                    b.Property<string>("ReceivedServices");

                    b.Property<string>("ReferredForTesting");

                    b.Property<string>("RelationshipWithContact");

                    b.Property<string>("ResultOfHIV");

                    b.Property<string>("ResultOfHIVSelf");

                    b.Property<string>("ScreenedTB");

                    b.Property<string>("SexuallyActive");

                    b.Property<string>("SharedNeedle");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("SpecificReasonForIneligibility");

                    b.Property<string>("StartedOnART");

                    b.Property<string>("TBStatus");

                    b.Property<string>("TestedHIVBefore");

                    b.Property<string>("TraditionalProcedures");

                    b.Property<string>("TypeGBV");

                    b.Property<string>("UnknownStatusPartner");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("WeightLoss");

                    b.Property<string>("WhoPerformedTest");

                    b.HasKey("Id");

                    b.ToTable("TempHtsEligibilityExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerNotificationServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateElicited");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityLinkedTo");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("LinkedToCare");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationsipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempHtsPartnerNotificationServicesExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerNotificationServicesError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateElicited");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityLinkedTo");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("LinkedToCare");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationsipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsPartnerNotificationServicesError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerNotificationServicesErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateElicited");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityLinkedTo");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("LinkedToCare");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RelationsipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsPartnerNotificationServicesExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerTracing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("TraceDate");

                    b.Property<string>("TraceOutcome");

                    b.Property<string>("TraceType");

                    b.HasKey("Id");

                    b.ToTable("TempHtsPartnerTracingExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerTracingError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("TraceDate");

                    b.Property<string>("TraceOutcome");

                    b.Property<string>("TraceType");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsPartnerTracingError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsPartnerTracingErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BookingDate");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<DateTime?>("TraceDate");

                    b.Property<string>("TraceOutcome");

                    b.Property<string>("TraceType");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsPartnerTracingExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsRiskScores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateLastModified");

                    b.Property<string>("Description");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("EvaluationDate");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<string>("RiskFactors");

                    b.Property<decimal?>("RiskScore");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SourceSysUUID");

                    b.HasKey("Id");

                    b.ToTable("TempHtsRiskScoresExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsTestKits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SyphilisResult");

                    b.Property<string>("TestKitExpiry1");

                    b.Property<string>("TestKitExpiry2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.HasKey("Id");

                    b.ToTable("TempHtsTestKitsExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsTestKitsError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SyphilisResult");

                    b.Property<string>("TestKitExpiry1");

                    b.Property<string>("TestKitExpiry2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsTestKitsError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.NewHts.TempHtsTestKitsErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPK");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("SyphilisResult");

                    b.Property<string>("TestKitExpiry1");

                    b.Property<string>("TestKitExpiry2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResult1");

                    b.Property<string>("TestResult2");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHtsTestKitsExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("NUPI");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("DisabilityType");

                    b.Property<DateTime?>("Dob");

                    b.Property<string>("Emr");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("NUPI");

                    b.Property<string>("PatientConsented");

                    b.Property<string>("PatientDisabled");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("Pkv");

                    b.Property<string>("PopulationType");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientSelfTested");

                    b.Property<string>("ClientTestedAs");

                    b.Property<string>("CoupleDiscordant");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<DateTime?>("Dob");

                    b.Property<int?>("EncounterId");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("FinalResultHTS");

                    b.Property<string>("FinalResultsGiven");

                    b.Property<string>("Gender");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("KeyPop");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MonthsLastTested");

                    b.Property<string>("NUPI");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StrategyHTS");

                    b.Property<string>("Summary");

                    b.Property<string>("TBScreeningHTS");

                    b.Property<DateTime?>("TestKitExpiryDate1");

                    b.Property<string>("TestKitExpiryDate2");

                    b.Property<string>("TestKitLotNumber1");

                    b.Property<string>("TestKitLotNumber2");

                    b.Property<string>("TestKitName1");

                    b.Property<string>("TestKitName2");

                    b.Property<string>("TestResultsHTS1");

                    b.Property<string>("TestResultsHTS2");

                    b.Property<string>("TestType");

                    b.Property<string>("TestedBefore");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientLinkageExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPk");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TracingOutcome");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientLinkageExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientLinkageExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CccNumber");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("EnrolledFacilityName");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<int?>("PatientPK");

                    b.Property<DateTime?>("PhoneTracingDate");

                    b.Property<DateTime?>("PhysicalTracingDate");

                    b.Property<Guid>("RecordId");

                    b.Property<DateTime?>("ReferralDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("TracingOutcome");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientLinkageExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("TempHtsClientPartnerExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<bool>("CheckError");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPk");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<string>("Project");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientPartnerExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Hts.TempHTSClientPartnerExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("CccNumber");

                    b.Property<string>("CurrentlyLivingWithIndexClient");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IpvScreeningOutcome");

                    b.Property<string>("KnowledgeOfHivStatus");

                    b.Property<DateTime?>("LinkDateLinkedToCare");

                    b.Property<string>("Linked");

                    b.Property<int?>("PartnerPatientPk");

                    b.Property<int?>("PartnerPersonId");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PnsApproach");

                    b.Property<string>("PnsConsent");

                    b.Property<Guid>("RecordId");

                    b.Property<string>("RelationshipToIndexClient");

                    b.Property<string>("ScreenedForIpv");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<DateTime?>("Trace1Date");

                    b.Property<string>("Trace1Outcome");

                    b.Property<string>("Trace1Type");

                    b.Property<DateTime?>("Trace2Date");

                    b.Property<string>("Trace2Outcome");

                    b.Property<string>("Trace2Type");

                    b.Property<DateTime?>("Trace3Date");

                    b.Property<string>("Trace3Outcome");

                    b.Property<string>("Trace3Type");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempHTSClientPartnerExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mgs.TempMetricMigrationExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Dataset");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Metric");

                    b.Property<int>("MetricId");

                    b.Property<string>("MetricValue");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Stage");

                    b.HasKey("Id");

                    b.ToTable("TempMetricMigrationExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mgs.TempMetricMigrationExtractError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Dataset");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<string>("Emr");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Metric");

                    b.Property<int?>("MetricId");

                    b.Property<string>("MetricValue");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("vTempMetricMigrationExtractError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mgs.TempMetricMigrationExtractErrorSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Dataset");

                    b.Property<DateTime?>("DateGenerated");

                    b.Property<string>("Extract");

                    b.Property<string>("FacilityName");

                    b.Property<string>("Field");

                    b.Property<string>("Metric");

                    b.Property<int?>("MetricId");

                    b.Property<string>("MetricValue");

                    b.Property<Guid>("RecordId");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("vTempMetricMigrationExtractErrorSummary");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempAncVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ANCClinicNumber");

                    b.Property<int?>("ANCVisitNo");

                    b.Property<string>("AZTBabyDispense");

                    b.Property<string>("AntenatalExercises");

                    b.Property<int?>("BP");

                    b.Property<string>("BreastExam");

                    b.Property<string>("CACxScreen");

                    b.Property<string>("CACxScreenMethod");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ChronicIllness");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CounselledOn");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Deworming");

                    b.Property<string>("DiabetesTest");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FGM");

                    b.Property<string>("FGMComplications");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<int?>("GestationWeeks");

                    b.Property<string>("HIVStatusBeforeANC");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest1Result");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTest2Result");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestType");

                    b.Property<string>("HIVTestingDone");

                    b.Property<decimal?>("Haemoglobin");

                    b.Property<decimal?>("Height");

                    b.Property<string>("IronSupplementsGiven");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MalariaProphylaxis");

                    b.Property<DateTime?>("MotherGivenHAART");

                    b.Property<string>("MotherProphylaxisGiven");

                    b.Property<string>("NVPBabyDispense");

                    b.Property<DateTime?>("NextAppointmentANC");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PartnerHIVStatusANC");

                    b.Property<string>("PartnerHIVTestingANC");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PostParturmFP");

                    b.Property<string>("PreventiveServices");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("ReceivedMosquitoNet");

                    b.Property<string>("ReferralReasons");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SyphilisTestDone");

                    b.Property<string>("SyphilisTestResults");

                    b.Property<string>("SyphilisTestType");

                    b.Property<string>("SyphilisTreated");

                    b.Property<string>("SyphilisTreatment");

                    b.Property<string>("TBScreening");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("TetanusDose");

                    b.Property<string>("UrinalysisVariables");

                    b.Property<DateTime?>("VLDate");

                    b.Property<string>("VLResult");

                    b.Property<string>("VLSampleTaken");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<int?>("WHOStaging");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("TempAncVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempCwcEnrolmentExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ARTMother");

                    b.Property<string>("ARTRegimenMother");

                    b.Property<DateTime?>("ARTStartDateMother");

                    b.Property<decimal?>("BirthLength");

                    b.Property<int?>("BirthOrder");

                    b.Property<string>("BirthType");

                    b.Property<string>("BirthWeight");

                    b.Property<string>("BreastFeeding");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<DateTime?>("Gestation");

                    b.Property<string>("HEI");

                    b.Property<string>("HEIDate");

                    b.Property<string>("HEIID");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherAlive");

                    b.Property<string>("MothersCCCNo");

                    b.Property<string>("MothersPkv");

                    b.Property<string>("NVP");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientIDCWC");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<string>("PlaceOfDelivery");

                    b.Property<string>("Project");

                    b.Property<string>("ReferredFrom");

                    b.Property<DateTime?>("RegistrationAtCWC");

                    b.Property<DateTime?>("RegistrationAtHEI");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SpecialCare");

                    b.Property<string>("SpecialNeeds");

                    b.Property<string>("TransferIn");

                    b.Property<string>("TransferInDate");

                    b.Property<string>("TransferredFrom");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempCwcEnrolmentExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempCwcVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("DangerSigns");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Dewormed");

                    b.Property<string>("Disability");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FollowUP");

                    b.Property<decimal?>("Height");

                    b.Property<string>("Immunization");

                    b.Property<string>("InfantFeeding");

                    b.Property<string>("MNPsSupplementation");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MedicationGiven");

                    b.Property<string>("Milestones");

                    b.Property<DateTime?>("NextAppointment");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("ReceivedMosquitoNet");

                    b.Property<string>("ReferralReasons");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("Stunted");

                    b.Property<string>("TBAssessment");

                    b.Property<decimal?>("Temp");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("VitaminA");

                    b.Property<decimal?>("Weight");

                    b.Property<string>("WeightCategory");

                    b.HasKey("Id");

                    b.ToTable("TempCwcVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempHeiExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BasellineVL");

                    b.Property<DateTime?>("BasellineVLDate");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ConfirmatoryPCR");

                    b.Property<DateTime?>("ConfirmatoryPCRDate");

                    b.Property<string>("DNAPCR1");

                    b.Property<DateTime?>("DNAPCR1Date");

                    b.Property<string>("DNAPCR2");

                    b.Property<DateTime?>("DNAPCR2Date");

                    b.Property<string>("DNAPCR3");

                    b.Property<DateTime?>("DNAPCR3Date");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FinalyAntibody");

                    b.Property<DateTime?>("FinalyAntibodyDate");

                    b.Property<string>("HEIExitCritearia");

                    b.Property<DateTime?>("HEIExitDate");

                    b.Property<string>("HEIHIVStatus");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempHeiExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempMatVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ANCVisits");

                    b.Property<string>("AdmissionNumber");

                    b.Property<int?>("ApgarScore1");

                    b.Property<int?>("ApgarScore10");

                    b.Property<int?>("ApgarScore5");

                    b.Property<int?>("BabyBirthNumber");

                    b.Property<string>("BabyGivenProphylaxis");

                    b.Property<string>("BirthOutcome");

                    b.Property<string>("BirthWeight");

                    b.Property<string>("BirthWithDeformity");

                    b.Property<int?>("BloodLoss");

                    b.Property<string>("BloodLossVisual");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ChlorhexidineApplied");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("ConditonAfterDelivery");

                    b.Property<string>("CounselledOn");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateOfDelivery");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("DeliveryComplications");

                    b.Property<int?>("DurationOfDelivery");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<int?>("GestationAtBirth");

                    b.Property<string>("HIV1Results");

                    b.Property<string>("HIV2Results");

                    b.Property<string>("HIVStatusLastANC");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestingDone");

                    b.Property<string>("InitiatedBF");

                    b.Property<string>("KangarooCare");

                    b.Property<DateTime?>("MaternalDeath");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherDischargeDate");

                    b.Property<string>("MotherGivenCTX");

                    b.Property<int?>("NoBabiesDelivered");

                    b.Property<string>("OnARTANC");

                    b.Property<string>("PartnerHIVStatusMAT");

                    b.Property<string>("PartnerHIVTestingMAT");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PlacentaComplete");

                    b.Property<string>("Project");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<string>("SexBaby");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusBabyDischarge");

                    b.Property<string>("SyphilisTestResults");

                    b.Property<string>("TetracyclineGiven");

                    b.Property<string>("UterotonicGiven");

                    b.Property<string>("VaginalExamination");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<string>("VitaminKGiven");

                    b.HasKey("Id");

                    b.ToTable("TempMatVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempMnchArtExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("LastARTDate");

                    b.Property<string>("LastRegimen");

                    b.Property<string>("LastRegimenLine");

                    b.Property<string>("PatientHeiID");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Pkv");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("RegistrationAtCCC");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("StartARTDate");

                    b.Property<string>("StartRegimen");

                    b.Property<string>("StartRegimenLine");

                    b.Property<string>("StatusAtCCC");

                    b.HasKey("Id");

                    b.ToTable("TempMnchArtExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempMnchEnrolmentExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("EDDFromLMP");

                    b.Property<string>("Emr");

                    b.Property<DateTime?>("EnrollmentDateAtMnch");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstVisitAnc");

                    b.Property<int>("Gravidae");

                    b.Property<string>("HIVStatusBeforeANC");

                    b.Property<DateTime?>("HIVTestDate");

                    b.Property<DateTime?>("LMP");

                    b.Property<DateTime?>("MnchNumber");

                    b.Property<string>("Parity");

                    b.Property<string>("PartnerHIVStatus");

                    b.Property<DateTime?>("PartnerHIVTestDate");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<string>("ServiceType");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("StatusAtMnch");

                    b.HasKey("Id");

                    b.ToTable("TempMnchEnrolmentExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempMnchLabExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("LabReason");

                    b.Property<DateTime?>("OrderedbyDate");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMNCH_ID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<DateTime?>("ReportedbyDate");

                    b.Property<string>("SatelliteName");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempMnchLabExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempMotherBabyPairExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BabyPatientMncHeiID");

                    b.Property<int>("BabyPatientPK");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("MotherPatientMncHeiID");

                    b.Property<int>("MotherPatientPK");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientIDCCC");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempMotherBabyPairExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempPatientMnchExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime?>("DOB");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("EducationLevel");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstEnrollmentAtMnch");

                    b.Property<string>("Gender");

                    b.Property<string>("InSchool");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("Occupation");

                    b.Property<string>("PatientHeiID");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PatientResidentCounty");

                    b.Property<string>("PatientResidentSubCounty");

                    b.Property<string>("PatientResidentWard");

                    b.Property<string>("Pkv");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempPatientMnchExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mnch.TempPncVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BP");

                    b.Property<string>("BabyConditon");

                    b.Property<string>("BabyFeeding");

                    b.Property<string>("Breast");

                    b.Property<string>("BreastExam");

                    b.Property<string>("CACxScreenMethod");

                    b.Property<string>("CACxScreenResults");

                    b.Property<string>("CSScar");

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientScreenedCACx");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CounselledOnFP");

                    b.Property<string>("CoupleCounselled");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<string>("DeliveryOutcome");

                    b.Property<string>("Emr");

                    b.Property<string>("Episiotomy");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("Fistula");

                    b.Property<string>("GeneralCondition");

                    b.Property<string>("HIVTest1");

                    b.Property<string>("HIVTest1Result");

                    b.Property<string>("HIVTest2");

                    b.Property<string>("HIVTest2Result");

                    b.Property<string>("HIVTestFinalResult");

                    b.Property<string>("HIVTestingDone");

                    b.Property<string>("HaematinicsGiven");

                    b.Property<string>("HasPallor");

                    b.Property<decimal?>("Height");

                    b.Property<string>("Immunization");

                    b.Property<string>("InfantFeeding");

                    b.Property<string>("InfantProphylaxisGiven");

                    b.Property<string>("Lochia");

                    b.Property<int?>("MUAC");

                    b.Property<string>("MaternalComplications");

                    b.Property<string>("ModeOfDelivery");

                    b.Property<string>("MotherProphylaxisGiven");

                    b.Property<DateTime?>("NextAppointmentPNC");

                    b.Property<decimal?>("OxygenSaturation");

                    b.Property<string>("PNCRegisterNumber");

                    b.Property<int?>("PNCVisitNo");

                    b.Property<string>("PPH");

                    b.Property<string>("Pallor");

                    b.Property<string>("PartnerHIVResultPNC");

                    b.Property<string>("PartnerHIVTestingPNC");

                    b.Property<string>("PatientID");

                    b.Property<string>("PatientMnchID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PlaceOfDelivery");

                    b.Property<string>("PreventiveServices");

                    b.Property<string>("PriorHIVStatus");

                    b.Property<string>("Project");

                    b.Property<int?>("PulseRate");

                    b.Property<string>("ReceivedFP");

                    b.Property<string>("ReferredFrom");

                    b.Property<string>("ReferredTo");

                    b.Property<int?>("RespiratoryRate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TBScreening");

                    b.Property<decimal?>("Temp");

                    b.Property<string>("UmbilicalCord");

                    b.Property<string>("UterusInvolution");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("TempPncVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Mts.TempIndicatorExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Indicator");

                    b.Property<DateTime?>("IndicatorDate");

                    b.Property<string>("IndicatorValue");

                    b.HasKey("Id");

                    b.ToTable("TempIndicatorExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPatientPrepExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientPreviouslyonPrep");

                    b.Property<string>("ClientType");

                    b.Property<string>("County");

                    b.Property<string>("CountyofBirth");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateLastUsedPrev");

                    b.Property<DateTime?>("DateStartedPrEPattransferringfacility");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DatefirstinitiatedinPrepCare");

                    b.Property<DateTime?>("DateofBirth");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("Inschool");

                    b.Property<string>("KeyPopulationType");

                    b.Property<string>("LandMark");

                    b.Property<string>("Location");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("NUPI");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PopulationType");

                    b.Property<DateTime?>("PrepEnrollmentDate");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("PrevPrepReg");

                    b.Property<string>("Project");

                    b.Property<string>("ReferralPoint");

                    b.Property<string>("Refferedfrom");

                    b.Property<string>("Sex");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SubCounty");

                    b.Property<string>("TransferFromFacility");

                    b.Property<string>("TransferIn");

                    b.Property<DateTime?>("TransferInDate");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("TempPatientPrepExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepAdverseEventExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdverseEvent");

                    b.Property<string>("AdverseEventActionTaken");

                    b.Property<string>("AdverseEventCause");

                    b.Property<string>("AdverseEventClinicalOutcome");

                    b.Property<DateTime?>("AdverseEventEndDate");

                    b.Property<string>("AdverseEventIsPregnant");

                    b.Property<string>("AdverseEventRegimen");

                    b.Property<DateTime?>("AdverseEventStartDate");

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("Project");

                    b.Property<string>("Severity");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.ToTable("TempPrepAdverseEventExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepBehaviourRiskExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<string>("ClientAssessments");

                    b.Property<string>("ClientRisk");

                    b.Property<string>("ClientWillingToTakePrep");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<DateTime?>("FirstEstablishPartnerStatus");

                    b.Property<DateTime?>("HIVPartnerARTStartDate");

                    b.Property<string>("HIVPartnerCCCnumber");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("IsHIVPositivePartnerCurrentonART");

                    b.Property<string>("IsPartnerHighrisk");

                    b.Property<string>("MonthsknownHIVSerodiscordant");

                    b.Property<string>("NumberofchildrenWithPartner");

                    b.Property<string>("PartnerARTRisk");

                    b.Property<DateTime?>("PartnerEnrolledtoCCC");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PrEPDeclineReason");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("Project");

                    b.Property<string>("ReferralToOtherPrevServices");

                    b.Property<string>("RiskReductionEducationOffered");

                    b.Property<string>("SexPartnerHIVStatus");

                    b.Property<string>("SexWithoutCondom");

                    b.Property<int?>("SiteCode");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempPrepBehaviourRiskExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepCareTerminationExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("DateOfLastPrepDose");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitReason");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("Project");

                    b.Property<int?>("SiteCode");

                    b.HasKey("Id");

                    b.ToTable("TempPrepCareTerminationExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepLabExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("Project");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("SampleDate");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("TestName");

                    b.Property<string>("TestResult");

                    b.Property<DateTime?>("TestResultDate");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempPrepLabExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepPharmacyExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CheckError");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("DispenseDate");

                    b.Property<decimal?>("Duration");

                    b.Property<string>("Emr");

                    b.Property<int>("ErrorType");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("HtsNumber");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("Project");

                    b.Property<string>("RegimenPrescribed");

                    b.Property<int?>("SiteCode");

                    b.Property<int?>("VisitID");

                    b.HasKey("Id");

                    b.ToTable("TempPrepPharmacyExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Source.Prep.TempPrepVisitExtract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdherenceDone");

                    b.Property<string>("AdherenceOutcome");

                    b.Property<string>("AdherenceReasons");

                    b.Property<decimal?>("BMI");

                    b.Property<string>("BirthDefects");

                    b.Property<string>("BloodPressure");

                    b.Property<string>("Breastfeeding");

                    b.Property<bool>("CheckError");

                    b.Property<string>("Circumcised");

                    b.Property<string>("ClinicalNotes");

                    b.Property<string>("CondomsIssued");

                    b.Property<string>("ContraindicationsPrep");

                    b.Property<DateTime>("DateExtracted");

                    b.Property<DateTime?>("Date_Created");

                    b.Property<DateTime?>("Date_Last_Modified");

                    b.Property<DateTime?>("EDD");

                    b.Property<string>("Emr");

                    b.Property<string>("EncounterId");

                    b.Property<int>("ErrorType");

                    b.Property<string>("FPMethods");

                    b.Property<int?>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FamilyPlanningStatus");

                    b.Property<decimal?>("Height");

                    b.Property<string>("HepatitisBPositiveResult");

                    b.Property<string>("HepatitisCPositiveResult");

                    b.Property<string>("HtsNumber");

                    b.Property<DateTime?>("LMP");

                    b.Property<string>("MenopausalStatus");

                    b.Property<string>("MonthsPrescribed");

                    b.Property<DateTime?>("NextAppointment");

                    b.Property<string>("PatientID");

                    b.Property<int?>("PatientPK");

                    b.Property<string>("PlanningToGetPregnant");

                    b.Property<DateTime?>("PregnancyEndDate");

                    b.Property<string>("PregnancyEnded");

                    b.Property<string>("PregnancyOutcome");

                    b.Property<string>("PregnancyPlanned");

                    b.Property<string>("PregnantAtThisVisit");

                    b.Property<string>("PrepNumber");

                    b.Property<string>("PrepPrescribed");

                    b.Property<string>("PrepTreatmentPlan");

                    b.Property<string>("Project");

                    b.Property<string>("Reasonfornotgivingnextappointment");

                    b.Property<string>("RegimenPrescribed");

                    b.Property<string>("STIScreening");

                    b.Property<string>("STISymptoms");

                    b.Property<string>("STITreated");

                    b.Property<int?>("SiteCode");

                    b.Property<string>("SymptomsAcuteHIV");

                    b.Property<string>("Temperature");

                    b.Property<string>("Tobegivennextappointment");

                    b.Property<string>("TreatedForHepB");

                    b.Property<string>("TreatedForHepC");

                    b.Property<string>("VMMCReferral");

                    b.Property<string>("VaccinationForHepBStarted");

                    b.Property<string>("VaccinationForHepCStarted");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitID");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("TempPrepVisitExtracts");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ValidationError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateGenerated");

                    b.Property<Guid>("RecordId");

                    b.Property<Guid>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("ValidatorId");

                    b.ToTable("ValidationError");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Validator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extract");

                    b.Property<string>("Field");

                    b.Property<string>("Logic");

                    b.Property<string>("Summary");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Validator");
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.AllergiesChronicIllnessExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("AllergiesChronicIllnessExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.ContactListingExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("ContactListingExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.CovidExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("CovidExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DefaulterTracingExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("DefaulterTracingExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DepressionScreeningExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("DepressionScreeningExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.DrugAlcoholScreeningExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("DrugAlcoholScreeningExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.EnhancedAdherenceCounsellingExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("EnhancedAdherenceCounsellingExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.GbvScreeningExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("GbvScreeningExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.IptExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("IptExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.OtzExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("OtzExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.OvcExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("OvcExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientAdverseEventExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientAdverseEventExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientArtExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientArtExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientBaselinesExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientBaselinesExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientLaboratoryExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientLaboratoryExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientPharmacyExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientPharmacyExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientStatusExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientStatusExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Dwh.PatientExtract")
                        .WithMany("PatientVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientLinkage", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsClientLinkages")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientTests", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsClientTestss")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClientTracing", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsClientTracings")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsEligibilityExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsEligibilityExtracts")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsPartnerNotificationServices", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsPartnerNotificationServicess")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsPartnerTracing", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsPartnerTracings")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsRiskScores", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsRiskScores")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsTestKits", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Hts.NewHts.HtsClients")
                        .WithMany("HtsTestKitss")
                        .HasForeignKey("SiteCode", "PatientPk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.AncVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("AncVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.CwcEnrolmentExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("CwcEnrolmentExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.CwcVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("CwcVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.HeiExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("HeiExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MatVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("MatVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchArtExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("MnchArtExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchEnrolmentExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("MnchEnrolmentExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MnchLabExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("MnchLabExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.MotherBabyPairExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("MotherBabyPairExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PncVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Mnch.PatientMnchExtract")
                        .WithMany("PncVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepAdverseEventExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepAdverseEventExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepBehaviourRiskExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepBehaviourRiskExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepCareTerminationExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepCareTerminationExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepLabExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepLabExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepPharmacyExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepPharmacyExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PrepVisitExtract", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Destination.Prep.PatientPrepExtract")
                        .WithMany("PrepVisitExtracts")
                        .HasForeignKey("SiteCode", "PatientPK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dwapi.ExtractsManagement.Core.Model.ValidationError", b =>
                {
                    b.HasOne("Dwapi.ExtractsManagement.Core.Model.Validator")
                        .WithMany("ValidationErrors")
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
